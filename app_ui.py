import streamlit as st
import boto3
import uuid
import io
import time
import base64

# --- Auth Setup ---
VALID_USERNAME = base64.b64encode(b"admin").decode("utf-8")
VALID_PASSWORD = base64.b64encode(b"Zt82$wQ9pL@c!rM3").decode("utf-8")  # Secure password

def authenticate(username, password):
    encoded_user = base64.b64encode(username.encode("utf-8")).decode("utf-8")
    encoded_pass = base64.b64encode(password.encode("utf-8")).decode("utf-8")
    return encoded_user == VALID_USERNAME and encoded_pass == VALID_PASSWORD

# --- Page Setup ---
st.set_page_config(page_title="CV Fit Evaluator", layout="centered")

st.markdown("""
    <style>
        .reportview-container .main .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            background-color: #ffffff;
            border-radius: 10px;
            padding-left: 2rem;
            padding-right: 2rem;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .stButton>button {
            background-color: #0066cc;
            color: white;
            border-radius: 8px;
            padding: 0.6em 1.2em;
            font-size: 16px;
        }
        .result-box {
            background-color: #e6f4ea;
            padding: 1em;
            border-left: 5px solid #34a853;
            border-radius: 6px;
            margin-top: 1rem;
        }
    </style>
""", unsafe_allow_html=True)

st.title("üìÑ AI-Powered CV Fit Evaluator")

# --- Authentication ---
st.markdown("### üîê Login")
with st.form("auth_form"):
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    submitted = st.form_submit_button("Login")

if submitted:
    if authenticate(username, password):
        st.session_state["authenticated"] = True
        st.success("‚úÖ Authentication successful")
    else:
        st.error("‚ùå Invalid credentials")

if not st.session_state.get("authenticated"):
    st.stop()

st.markdown("""
#### üöÄ How it works:
1. Upload a candidate's CV (.pdf or .docx)
2. Paste the job description into the box
3. Click "Evaluate Fit" to let our AI assess the match
4. View a match score and explanation generated by GPT

---
""")

cv_file = st.file_uploader("üì§ Upload Candidate's CV (.pdf or .docx)", type=["pdf", "docx"])
job_description = st.text_area("üìù Paste the Job Description", height=200)

S3_BUCKET = "cvfitment"
S3_REGION = "us-east-1"
s3 = boto3.client("s3", region_name=S3_REGION)

def upload_cv_and_jd_to_s3(cv_file, jd_text):
    shared_id = str(uuid.uuid4())
    cv_extension = cv_file.name.split('.')[-1]
    cv_key = f"uploads/{shared_id}_cv.{cv_extension}"
    s3.upload_fileobj(cv_file, S3_BUCKET, cv_key)
    jd_key = f"uploads/{shared_id}_job-description.txt"
    jd_bytes = io.BytesIO(jd_text.encode("utf-8"))
    s3.upload_fileobj(jd_bytes, S3_BUCKET, jd_key)
    flag_key = f"uploads/{shared_id}_ready.flag"
    s3.put_object(Bucket=S3_BUCKET, Key=flag_key, Body=b"ready")
    return {
        "cv_s3_uri": f"s3://{S3_BUCKET}/{cv_key}",
        "jd_s3_uri": f"s3://{S3_BUCKET}/{jd_key}",
        "correlation_id": shared_id
    }

def get_result_from_s3(correlation_id):
    key = f"results/{correlation_id}_result.txt"
    try:
        response = s3.get_object(Bucket=S3_BUCKET, Key=key)
        return response['Body'].read().decode('utf-8')
    except s3.exceptions.NoSuchKey:
        return None

if st.button("üîç Evaluate Fit"):
    if not cv_file or not job_description:
        st.warning("‚ö†Ô∏è Please upload a CV and provide a job description before proceeding.")
    else:
        with st.spinner("üîÑ Uploading CV and JD to S3..."):
            result = upload_cv_and_jd_to_s3(cv_file, job_description)
            st.success("‚úÖ Files uploaded to S3.")
            st.code(result['cv_s3_uri'], language='text')
            st.code(result['jd_s3_uri'], language='text')
            st.info(f"Correlation ID: {result['correlation_id']}")

        correlation_id = result['correlation_id']
        st.session_state["last_correlation_id"] = correlation_id

        with st.spinner("‚è≥ Waiting for result from ECS pipeline..."):
            start = time.time()
            for _ in range(60):
                match_result = get_result_from_s3(correlation_id)
                if match_result:
                    st.balloons()
                    st.success("üéØ Fit Score Ready")
                    st.markdown("### üß† AI Evaluation Result")
                    st.markdown(f"""
                        <div class='result-box'>
                        <pre style='white-space: pre-wrap;'>{match_result}</pre>
                        </div>
                    """, unsafe_allow_html=True)
                    break
                time.sleep(1)
                elapsed = int(time.time() - start)
                st.info(f"‚è± Waited {elapsed}s so far...")
            else:
                st.error("‚ùå Result not available. Please try again later.")
                st.info("You may retry after a minute if result doesn't appear.")

st.markdown("---")
st.markdown("<center>Built with ‚ù§Ô∏è using LangChain, OpenAI & Streamlit</center>", unsafe_allow_html=True)
